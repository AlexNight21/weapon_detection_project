В данном проекте были реализованы оба сценария, которые были предложены преподавателями курса.

Этапы разработки проекта:

1) Выбор фреймворка/библиотеки для использования детектора.

Для данного проекта в качестве фреймворка для нейросети-детектора был выбран "mmdetection".

2) Запуск детектора на случайных изображениях.

Для данного проекта в качестве нейросети-детектора был выбран SSD.
В файле "ssd_example.ipynb" с помощью "mmdetection" реализован запуск детектора на изображениях,
которые находятся в папке (mmdetection/test_images). Это случайные изображения из интернета, на которых
изображены различные объекты и оружие.
Можно заметить, что SSD корректно обнаруживает те классы, на которых она была заранее предобучена (предобученные
веса для SSD находятся в папке ("mmdetection/checkpoints")). Однако оружие на изображениях либо совсем не определяется,
либо определяется некорректно. Это связано с тем, что SSD предобучен на датасете Coco, в котором отсутствует класс "Оружие".

3) Выбор датасета.

В качестве датасета для обучения SSD был выбран датасет с kaggle.com "Weapons in Images" (https://www.kaggle.com/datasets/jubaerad/weapons-in-images-segmented-videos).
Для обучения я использовал данные с директории (Weapons-in-Images). Данная директория в сумме содержит 8734 изображений 
с оружием (без разбиения на классы) и разметкой bounding boxes для них. Однако эти данные совсем не предобработаны.

4) Предобработка данных.

В файле "ssd_training.ipynb" реализована предобработка данных датасета "Weapons in Images" с последующим обучением нейронной
сети с помощью фреймворка "mmdetection". Это было реализовано на kaggle.com, так как google.colab предоставляет совсем мало
времени пользования ресурсами GPU.
Изначально разметка bounding boxes в датасете "Weapons in Images" реализована под формат YOLO. Поэтому для возможности обучения
сети с помощью "mmdetection" разметка была переделана под middle format фреймворка.
В процессе неудачных попыток запуска обучения было выяснено, что датасет содержит изображения, для которых отсутвует разметка, и
пустые .txt файлы с разметкой. От таких данных пришлось избавиться.
После этого у меня все равно не запускалось обучение, так как функции потерь стемились к бесконечности. На гитхабе от разработчиков
"mmdetection" было предложено избавляться от bounding boxes, имеющих ширину или высотку менее 1, так как такие разметки могут привести
к "взрыву" градиентов на этапе обучения.
В итоге после всех предобработок был получен датасет с 4239 изображениями с оружием и 4239 файлов с разметками к ним.

5) Обучение модели-детектора.

Как уже было сказано ранее, в файле "ssd_training.ipynb" реализовано дообучение сети SSD на предобработанном датасете "Weapons in Images"
с помощью фреймворка "mmdetection". Обучение сети было произведено на платформе kaggle.com.
Датасет был разделен на обучающую (3391 данных) и валидационную (848 данных) выборки.
В качестве метрики проверки качества была выбрана метрика "mAP". Обучение сети проходило в течение 12 эпох.
Все результаты и логи обучения сети сохранены в папке (mmdetection/tutorial_exps).

6) Выбор фреймворка/библиотеки для разработки веб/мобильного демо.

В данном проекте в качестве фреймворка для разработки веб-приложения был выбран "Streamlit".

7) Разработка демо и встраивание модели-детектора в демо.

В файле "main.py" реализована разработка веб-приложения с помощью фреймворка "Streamlit" и встраивание в него предобученной
модели-детектора, позволяющей детектировать оружие на предоставленных изображениях.
Изобажения можно подавать с помощью URL-ардеса или напрямую из папки.
Для запуска приложения необходимо в терминале прописать команду "streamlit run main.py"

8) Тестирование демо.

В папке "examples" представлены несколько примеров работы веб-приложения.

9) Оформление демо для показа другим людям.

На данный момент приложение можно только локально запустить на своем ПК (не хватило времени разобраться с размещением на сервере).